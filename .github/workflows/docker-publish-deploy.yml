name: Containerize and Deploy
on:
  workflow_call:
    inputs:
#      env:
#        type: string
#        required: true
      node-version:
        type: string
        default: 20.x
      environment_variables:
        type: string
      application_name:
        type: string
    outputs:
      image_version:
        description: "Image version created for the Container"
        value: ${{ jobs.containerize.outputs.external_image_version }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-ng
  REPO_NAME: ""
  ENVIRONMENT_NAME: ${{ github.ref == 'refs/heads/main' && 'staging' || github.ref == 'refs/heads/develop' && 'develop' || github.ref == 'refs/heads/qa' && 'qa' || startsWith(github.ref, 'refs/tags/v') && 'prod' || 'develop' }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read

    steps:
      # checkout the code
      - name: Check out code
        uses: actions/checkout@v3

      # Run install/build/test for all the matrix versions
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
          registry-url: https://npm.pkg.github.com/
          scope: "@klipocloud"
      - name: bun setup
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Install NPM packages
      - name: Install NPM packages
        run: bun install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_REGISTRY_PACKAGES }}

      - name: Build and run tests
        run: |
          echo ${{ env.ENVIRONMENT_NAME }}
          echo ${{ github.ref }}
          bun index.ts
          bun run build --if-present
          bun test --coverage --if-present
      - name: Configure Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: nextjs-cache-${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            nextjs-cache-${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}-

#  sonarcloud:
#    name: SonarCloud
#    runs-on: ubuntu-latest
#    needs: build-and-test
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
#      # Get the coverage report from cache
#      - name: Get coverage reports from cache
#        uses: actions/cache@v3
#        with:
#          path: coverage
#          key: current-test-coverage
#      - name: SonarCloud Scan
#        uses: SonarSource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  containerize:
    name: Dockerize
    runs-on: ubuntu-latest
#    needs: [build-and-test, sonarcloud]
    needs: [build-and-test]
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write

    outputs:
      image_id: ${{ steps.meta.outputs.tags }}
      image_version: ${{ steps.meta.outputs.version }}
      external_image_version: ${{ steps.image_version.outputs.IMAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Creating environment file
      - name: Create .env file based on Variable Names
        id: parse-secrets-json
        run: |
          if [[ $ENV == 'develop' ]]; then
            PREFIX=DEV_
          elif [[ $ENV == 'qa' ]]; then
            PREFIX=QA_
          elif [[ $ENV == 'staging' ]]; then
            PREFIX=UAT_
          elif [[ $ENV == 'prod' ]]; then
            PREFIX=''
          else
            PREFIX='NO_ENVIRONMENT_'
          fi
          for variable_name in $(echo "${{ inputs.environment_variables }}"); do
            VARIABLE_NAME=$(echo $variable_name | cut -d'=' -f 1)
            SECRET_NAME=$(echo $variable_name | cut -d'=' -f 2)
            if [[ -n $SECRET_NAME ]]; then
              result=$(echo "$ALLMYVARS" | jq -r ".${PREFIX}$SECRET_NAME")
              if [[ $result == 'null' ]]; then
                result=$(echo "$ALLMYSECRETS" | jq -r ".${PREFIX}$SECRET_NAME")
                if [[ $result == 'null' ]]; then
                  result=$SECRET_NAME
                fi
              fi
            else
              result=$SECRET_NAME
            fi
            echo $VARIABLE_NAME=$result >> .env
          done
        shell: bash
        env:
          ENV: ${{ env.ENVIRONMENT_NAME }}
          ALLMYSECRETS: ${{ toJson(secrets) }}
          ALLMYVARS: ${{ toJson(vars) }}

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=${{ env.ENVIRONMENT_NAME }}-
          labels: |
            org.opencontainers.image.vendor=KlipoCloud

      - name: Output encoded image version
        id: image_version
        env:
          IMAGE_VERSION: ${{ steps.meta.outputs.version }}
        run: |
          echo "IMAGE_VERSION=$(echo $IMAGE_VERSION | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            "github_registry_token=${{ secrets.GH_REGISTRY_PACKAGES }}"

      # Sign the resulting Docker image digest except on PRs and private repos
      # The keyless signing process records signatures on the Rekor public
      # transparency log, so signing is disabled for private repos by default
      # to avoid leaking private data.  If you wish to sign things anyways,
      # then this check can be removed and --force can be added to the cosign
      # command below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' && !github.event.repository.private }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance, and records it to the
        # sigstore community Rekor transparency log.
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
